name: simple-ci-cd

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prep SSH key
        run: |
          echo "$SSH_PRIVATE_KEY" > id_rsa
          chmod 600 id_rsa
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}

      - name: Deploy (docker compose)
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} <<'EOF'
          set -e
          REPO=heatmap-bff
          if [ ! -d "$REPO" ]; then
            git clone ${{ github.server_url }}/${{ github.repository }} "$REPO"
          fi
          cd "$REPO"
          git fetch --all
          git reset --hard origin/main
          cd heatmap_bff
          
          # Ensure data directory exists (data uploaded manually)
          mkdir -p data
          if [ -f ~/tracks.csv ]; then
            cp ~/tracks.csv data/tracks.csv
          fi
          
          # Install Docker if missing (hackathon quick path)
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker not found: installing via get.docker.com script"
            apt-get update -y && apt-get install -y curl
            curl -fsSL https://get.docker.com | sh
            systemctl enable docker || true
            systemctl start docker || true
            echo "Docker installed: $(docker --version)"
          fi
          # Basic sanity: ensure docker compose v2 available
          if ! docker compose version >/dev/null 2>&1; then
            echo "docker compose plugin missing; attempting manual install";
            curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose;
            chmod +x /usr/local/bin/docker-compose;
            ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose || true;
          fi
          echo "Docker Compose version:"; (docker compose version || docker-compose version || true)
          
          # Build aggregates if data exists and aggregates don't exist
          if [ -f ./data/tracks.csv ] && [ ! -f ./outputs/h3_aggregates.csv ]; then
            echo "Building H3 aggregates..."
            docker run --rm -v $(pwd):/app -w /app python:3.11-slim bash -c "
              pip install pandas h3 && 
              python -m heatmap_bff.scripts.build_precomputed --input ./data/tracks.csv --out ./outputs/h3_aggregates.csv --res 6 7 8 --k 20
            "
          fi
          
          docker compose down || true
          docker compose up -d --build
          echo "Containers:"; docker ps --format 'table {{.Names}}\t{{.Status}}'
          EOF

      - name: Health check
        run: |
          curl -fsS http://${{ secrets.PROD_HOST }}:8000/heatmap/meta | head -c 300 || (echo 'Health check failed' && exit 1)
